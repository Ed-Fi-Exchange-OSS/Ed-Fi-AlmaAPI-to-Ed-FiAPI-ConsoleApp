/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// EdFiCourseTranscriptPartialCourseTranscriptAwards
    /// </summary>
    [DataContract]
    public partial class EdFiCourseTranscriptPartialCourseTranscriptAwards :  IEquatable<EdFiCourseTranscriptPartialCourseTranscriptAwards>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCourseTranscriptPartialCourseTranscriptAwards" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiCourseTranscriptPartialCourseTranscriptAwards() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCourseTranscriptPartialCourseTranscriptAwards" /> class.
        /// </summary>
        /// <param name="awardDate">The date the partial credits and/or grades were awarded or earned. (required).</param>
        /// <param name="methodCreditEarnedDescriptor">The method the credits were earned..</param>
        /// <param name="earnedCredits">The number of credits a student earned for completing a given course. (required).</param>
        /// <param name="letterGradeEarned">The indicator of student performance as submitted by the instructor..</param>
        /// <param name="numericGradeEarned">The indicator of student performance as submitted by the instructor..</param>
        public EdFiCourseTranscriptPartialCourseTranscriptAwards(DateTime? awardDate = default(DateTime?), string methodCreditEarnedDescriptor = default(string), double? earnedCredits = default(double?), string letterGradeEarned = default(string), string numericGradeEarned = default(string))
        {
            // to ensure "awardDate" is required (not null)
            if (awardDate == null)
            {
                throw new InvalidDataException("awardDate is a required property for EdFiCourseTranscriptPartialCourseTranscriptAwards and cannot be null");
            }
            else
            {
                this.AwardDate = awardDate;
            }
            // to ensure "earnedCredits" is required (not null)
            if (earnedCredits == null)
            {
                throw new InvalidDataException("earnedCredits is a required property for EdFiCourseTranscriptPartialCourseTranscriptAwards and cannot be null");
            }
            else
            {
                this.EarnedCredits = earnedCredits;
            }
            this.MethodCreditEarnedDescriptor = methodCreditEarnedDescriptor;
            this.LetterGradeEarned = letterGradeEarned;
            this.NumericGradeEarned = numericGradeEarned;
        }
        
        /// <summary>
        /// The date the partial credits and/or grades were awarded or earned.
        /// </summary>
        /// <value>The date the partial credits and/or grades were awarded or earned.</value>
        [DataMember(Name="awardDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? AwardDate { get; set; }

        /// <summary>
        /// The method the credits were earned.
        /// </summary>
        /// <value>The method the credits were earned.</value>
        [DataMember(Name="methodCreditEarnedDescriptor", EmitDefaultValue=false)]
        public string MethodCreditEarnedDescriptor { get; set; }

        /// <summary>
        /// The number of credits a student earned for completing a given course.
        /// </summary>
        /// <value>The number of credits a student earned for completing a given course.</value>
        [DataMember(Name="earnedCredits", EmitDefaultValue=false)]
        public double? EarnedCredits { get; set; }

        /// <summary>
        /// The indicator of student performance as submitted by the instructor.
        /// </summary>
        /// <value>The indicator of student performance as submitted by the instructor.</value>
        [DataMember(Name="letterGradeEarned", EmitDefaultValue=false)]
        public string LetterGradeEarned { get; set; }

        /// <summary>
        /// The indicator of student performance as submitted by the instructor.
        /// </summary>
        /// <value>The indicator of student performance as submitted by the instructor.</value>
        [DataMember(Name="numericGradeEarned", EmitDefaultValue=false)]
        public string NumericGradeEarned { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiCourseTranscriptPartialCourseTranscriptAwards {\n");
            sb.Append("  AwardDate: ").Append(AwardDate).Append("\n");
            sb.Append("  MethodCreditEarnedDescriptor: ").Append(MethodCreditEarnedDescriptor).Append("\n");
            sb.Append("  EarnedCredits: ").Append(EarnedCredits).Append("\n");
            sb.Append("  LetterGradeEarned: ").Append(LetterGradeEarned).Append("\n");
            sb.Append("  NumericGradeEarned: ").Append(NumericGradeEarned).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiCourseTranscriptPartialCourseTranscriptAwards);
        }

        /// <summary>
        /// Returns true if EdFiCourseTranscriptPartialCourseTranscriptAwards instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiCourseTranscriptPartialCourseTranscriptAwards to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiCourseTranscriptPartialCourseTranscriptAwards input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AwardDate == input.AwardDate ||
                    (this.AwardDate != null &&
                    this.AwardDate.Equals(input.AwardDate))
                ) && 
                (
                    this.MethodCreditEarnedDescriptor == input.MethodCreditEarnedDescriptor ||
                    (this.MethodCreditEarnedDescriptor != null &&
                    this.MethodCreditEarnedDescriptor.Equals(input.MethodCreditEarnedDescriptor))
                ) && 
                (
                    this.EarnedCredits == input.EarnedCredits ||
                    (this.EarnedCredits != null &&
                    this.EarnedCredits.Equals(input.EarnedCredits))
                ) && 
                (
                    this.LetterGradeEarned == input.LetterGradeEarned ||
                    (this.LetterGradeEarned != null &&
                    this.LetterGradeEarned.Equals(input.LetterGradeEarned))
                ) && 
                (
                    this.NumericGradeEarned == input.NumericGradeEarned ||
                    (this.NumericGradeEarned != null &&
                    this.NumericGradeEarned.Equals(input.NumericGradeEarned))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AwardDate != null)
                    hashCode = hashCode * 59 + this.AwardDate.GetHashCode();
                if (this.MethodCreditEarnedDescriptor != null)
                    hashCode = hashCode * 59 + this.MethodCreditEarnedDescriptor.GetHashCode();
                if (this.EarnedCredits != null)
                    hashCode = hashCode * 59 + this.EarnedCredits.GetHashCode();
                if (this.LetterGradeEarned != null)
                    hashCode = hashCode * 59 + this.LetterGradeEarned.GetHashCode();
                if (this.NumericGradeEarned != null)
                    hashCode = hashCode * 59 + this.NumericGradeEarned.GetHashCode();
                return hashCode;
            }
        }
    }

}
