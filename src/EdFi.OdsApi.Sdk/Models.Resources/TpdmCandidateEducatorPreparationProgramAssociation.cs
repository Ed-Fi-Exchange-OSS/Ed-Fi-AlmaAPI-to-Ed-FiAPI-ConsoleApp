/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmCandidateEducatorPreparationProgramAssociation
    /// </summary>
    [DataContract]
    public partial class TpdmCandidateEducatorPreparationProgramAssociation :  IEquatable<TpdmCandidateEducatorPreparationProgramAssociation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCandidateEducatorPreparationProgramAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmCandidateEducatorPreparationProgramAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCandidateEducatorPreparationProgramAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="beginDate">The begin date for the association. (required).</param>
        /// <param name="candidateReference">candidateReference (required).</param>
        /// <param name="educatorPreparationProgramReference">educatorPreparationProgramReference (required).</param>
        /// <param name="cohortYears">An unordered collection of candidateEducatorPreparationProgramAssociationCohortYears. The type and year of a cohort the student belongs to as determined by the year that student entered a specific grade..</param>
        /// <param name="degreeSpecializations">An unordered collection of candidateEducatorPreparationProgramAssociationDegreeSpecializations. Information around the area(s) of specialization for an individual..</param>
        /// <param name="endDate">The end date for the association..</param>
        /// <param name="eppProgramPathwayDescriptor">The program pathway the candidate is following; for example: Residency, Internship, Traditional.</param>
        /// <param name="reasonExitedDescriptor">Reason exited for the association..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmCandidateEducatorPreparationProgramAssociation(string id = default(string), DateTime? beginDate = default(DateTime?), TpdmCandidateReference candidateReference = default(TpdmCandidateReference), TpdmEducatorPreparationProgramReference educatorPreparationProgramReference = default(TpdmEducatorPreparationProgramReference), List<TpdmCandidateEducatorPreparationProgramAssociationCohortYear> cohortYears = default(List<TpdmCandidateEducatorPreparationProgramAssociationCohortYear>), List<TpdmCandidateEducatorPreparationProgramAssociationDegreeSpecialization> degreeSpecializations = default(List<TpdmCandidateEducatorPreparationProgramAssociationDegreeSpecialization>), DateTime? endDate = default(DateTime?), string eppProgramPathwayDescriptor = default(string), string reasonExitedDescriptor = default(string), string etag = default(string))
        {
            // to ensure "beginDate" is required (not null)
            if (beginDate == null)
            {
                throw new InvalidDataException("beginDate is a required property for TpdmCandidateEducatorPreparationProgramAssociation and cannot be null");
            }
            else
            {
                this.BeginDate = beginDate;
            }
            // to ensure "candidateReference" is required (not null)
            if (candidateReference == null)
            {
                throw new InvalidDataException("candidateReference is a required property for TpdmCandidateEducatorPreparationProgramAssociation and cannot be null");
            }
            else
            {
                this.CandidateReference = candidateReference;
            }
            // to ensure "educatorPreparationProgramReference" is required (not null)
            if (educatorPreparationProgramReference == null)
            {
                throw new InvalidDataException("educatorPreparationProgramReference is a required property for TpdmCandidateEducatorPreparationProgramAssociation and cannot be null");
            }
            else
            {
                this.EducatorPreparationProgramReference = educatorPreparationProgramReference;
            }
            this.Id = id;
            this.CohortYears = cohortYears;
            this.DegreeSpecializations = degreeSpecializations;
            this.EndDate = endDate;
            this.EppProgramPathwayDescriptor = eppProgramPathwayDescriptor;
            this.ReasonExitedDescriptor = reasonExitedDescriptor;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The begin date for the association.
        /// </summary>
        /// <value>The begin date for the association.</value>
        [DataMember(Name="beginDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// Gets or Sets CandidateReference
        /// </summary>
        [DataMember(Name="candidateReference", EmitDefaultValue=false)]
        public TpdmCandidateReference CandidateReference { get; set; }

        /// <summary>
        /// Gets or Sets EducatorPreparationProgramReference
        /// </summary>
        [DataMember(Name="educatorPreparationProgramReference", EmitDefaultValue=false)]
        public TpdmEducatorPreparationProgramReference EducatorPreparationProgramReference { get; set; }

        /// <summary>
        /// An unordered collection of candidateEducatorPreparationProgramAssociationCohortYears. The type and year of a cohort the student belongs to as determined by the year that student entered a specific grade.
        /// </summary>
        /// <value>An unordered collection of candidateEducatorPreparationProgramAssociationCohortYears. The type and year of a cohort the student belongs to as determined by the year that student entered a specific grade.</value>
        [DataMember(Name="cohortYears", EmitDefaultValue=false)]
        public List<TpdmCandidateEducatorPreparationProgramAssociationCohortYear> CohortYears { get; set; }

        /// <summary>
        /// An unordered collection of candidateEducatorPreparationProgramAssociationDegreeSpecializations. Information around the area(s) of specialization for an individual.
        /// </summary>
        /// <value>An unordered collection of candidateEducatorPreparationProgramAssociationDegreeSpecializations. Information around the area(s) of specialization for an individual.</value>
        [DataMember(Name="degreeSpecializations", EmitDefaultValue=false)]
        public List<TpdmCandidateEducatorPreparationProgramAssociationDegreeSpecialization> DegreeSpecializations { get; set; }

        /// <summary>
        /// The end date for the association.
        /// </summary>
        /// <value>The end date for the association.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The program pathway the candidate is following; for example: Residency, Internship, Traditional
        /// </summary>
        /// <value>The program pathway the candidate is following; for example: Residency, Internship, Traditional</value>
        [DataMember(Name="eppProgramPathwayDescriptor", EmitDefaultValue=false)]
        public string EppProgramPathwayDescriptor { get; set; }

        /// <summary>
        /// Reason exited for the association.
        /// </summary>
        /// <value>Reason exited for the association.</value>
        [DataMember(Name="reasonExitedDescriptor", EmitDefaultValue=false)]
        public string ReasonExitedDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmCandidateEducatorPreparationProgramAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  CandidateReference: ").Append(CandidateReference).Append("\n");
            sb.Append("  EducatorPreparationProgramReference: ").Append(EducatorPreparationProgramReference).Append("\n");
            sb.Append("  CohortYears: ").Append(CohortYears).Append("\n");
            sb.Append("  DegreeSpecializations: ").Append(DegreeSpecializations).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EppProgramPathwayDescriptor: ").Append(EppProgramPathwayDescriptor).Append("\n");
            sb.Append("  ReasonExitedDescriptor: ").Append(ReasonExitedDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmCandidateEducatorPreparationProgramAssociation);
        }

        /// <summary>
        /// Returns true if TpdmCandidateEducatorPreparationProgramAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmCandidateEducatorPreparationProgramAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmCandidateEducatorPreparationProgramAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BeginDate == input.BeginDate ||
                    (this.BeginDate != null &&
                    this.BeginDate.Equals(input.BeginDate))
                ) && 
                (
                    this.CandidateReference == input.CandidateReference ||
                    (this.CandidateReference != null &&
                    this.CandidateReference.Equals(input.CandidateReference))
                ) && 
                (
                    this.EducatorPreparationProgramReference == input.EducatorPreparationProgramReference ||
                    (this.EducatorPreparationProgramReference != null &&
                    this.EducatorPreparationProgramReference.Equals(input.EducatorPreparationProgramReference))
                ) && 
                (
                    this.CohortYears == input.CohortYears ||
                    this.CohortYears != null &&
                    this.CohortYears.SequenceEqual(input.CohortYears)
                ) && 
                (
                    this.DegreeSpecializations == input.DegreeSpecializations ||
                    this.DegreeSpecializations != null &&
                    this.DegreeSpecializations.SequenceEqual(input.DegreeSpecializations)
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.EppProgramPathwayDescriptor == input.EppProgramPathwayDescriptor ||
                    (this.EppProgramPathwayDescriptor != null &&
                    this.EppProgramPathwayDescriptor.Equals(input.EppProgramPathwayDescriptor))
                ) && 
                (
                    this.ReasonExitedDescriptor == input.ReasonExitedDescriptor ||
                    (this.ReasonExitedDescriptor != null &&
                    this.ReasonExitedDescriptor.Equals(input.ReasonExitedDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BeginDate != null)
                    hashCode = hashCode * 59 + this.BeginDate.GetHashCode();
                if (this.CandidateReference != null)
                    hashCode = hashCode * 59 + this.CandidateReference.GetHashCode();
                if (this.EducatorPreparationProgramReference != null)
                    hashCode = hashCode * 59 + this.EducatorPreparationProgramReference.GetHashCode();
                if (this.CohortYears != null)
                    hashCode = hashCode * 59 + this.CohortYears.GetHashCode();
                if (this.DegreeSpecializations != null)
                    hashCode = hashCode * 59 + this.DegreeSpecializations.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.EppProgramPathwayDescriptor != null)
                    hashCode = hashCode * 59 + this.EppProgramPathwayDescriptor.GetHashCode();
                if (this.ReasonExitedDescriptor != null)
                    hashCode = hashCode * 59 + this.ReasonExitedDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
